{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Jordan Harrison's Go Tutorial","text":"<p>This is my home page. I will use it to organize anything related to the tutorial.</p>"},{"location":"tutorials/go-setup/","title":"Go setup","text":"<p>Here, this tutorial will show you how to set up Go, specifically in a DevContainer!</p> <p>Prerequisites:</p> <ul> <li> <p>Make sure VS Code with the Dev Containers extension is installed.</p> </li> <li> <p>Install docker and make sure Docker is running.</p> </li> <li> <p>Understand the fundamentals of Git and the command-line tools.</p> </li> </ul>"},{"location":"tutorials/go-setup/#1-create-a-new-directory-and-initialize-a-new-git-repository","title":"1. <code>Create a New Directory and Initialize a New Git Repository</code>","text":"<p>Go to your computer's terminal and go to one of your preferred directories. Run the following:  <pre><code>mkdir comp423-first-project-go\ncd comp423-first-project-go\ngit init\n</code></pre> Create a README file and have it link back to this site: <pre><code>echo  \"# COMP423 Go Hello World\" &gt;&gt; README.md\necho  \"[Tutorial Link](https://jharrison21.github.io/comp423-course-notes/)\" &gt;&gt; README.md\n</code></pre></p> <p>Now go ahead and stage and commit your README. <pre><code>git add README.md\ngit commit -m \"1st README Commit\"\n</code></pre></p>"},{"location":"tutorials/go-setup/#2-establishing-github-connection","title":"2. <code>Establishing GitHub Connection</code>","text":"<ul> <li>Once logged in on GitHub, click your profile pic. Click the Create New tab, then  click New Repository.</li> <li>Fill the repository name, description, and visibility options.</li> <li>Click Create Repository</li> <li>Go back to your terminal and add your newly created GitHub Repo as a remote <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/&lt;your-repo-name&gt;.git\n</code></pre> Push your local repo <pre><code>git push --set-upstream origin main\n</code></pre> Now your repo should be completely set up!</li> </ul>"},{"location":"tutorials/go-setup/#3-configure-the-devcontainer","title":"3. <code>Configure the DevContainer</code>","text":"<ul> <li>Open VS Code and open your preferred directory from earlier. </li> <li>Inside there, go to the comp423-first-project-go directory and make a .devcontainer directory in the root. </li> <li>Now make json file inside  .devcontainer called 'devcontainer.json': <pre><code>{\n    \"name\": \"COMP423 Course Notes\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\n\n          \"golang.go\"           // Go language extension\n        ]\n      }\n    },\n    \"postCreateCommand\": \"go version\"\n  }\n</code></pre></li> </ul>"},{"location":"tutorials/go-setup/#4-open-project-in-devcontainer","title":"4. <code>Open Project in DevContainer</code>","text":"<p>While in VS Code, open the command palette (Command + Shift + P for Mac or Ctrl + Shift + P for Windows/Linux) and make sure to search and find \"Reopen in Container\". When you find it click it.</p>"},{"location":"tutorials/go-setup/#5-double-check-if-go-is-installed","title":"5. <code>Double Check if Go is Installed</code>","text":"<p>Run the following in the terminal: </p> <pre><code>go version\n</code></pre> <p>Go Installation</p> <p>If installed, it should output the version, otherwise, no version number will show.</p>"},{"location":"tutorials/go-setup/#6-create-a-new-go-project","title":"6. <code>Create a New Go Project</code>","text":"<p>Run the following in the terminal: </p> <p><pre><code>go mod init hello-comp423\n</code></pre> This should create a new Go module.</p>"},{"location":"tutorials/go-setup/#7-make-a-hello-comp423-program","title":"7. <code>Make a \"Hello COMP423\" Program</code>","text":"<p>Run the following in the terminal: </p> <pre><code>touch main.go\n</code></pre> <p>That should create the file and from there input the following program in the file: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></p>"},{"location":"tutorials/go-setup/#8-run-the-program-using-go-run","title":"8. <code>Run the Program Using \"go run\"</code>","text":"<p>Now run the program in the terminal:</p> <p><pre><code>go run main.go\n</code></pre> This is one way to both compile and run the program</p>"},{"location":"tutorials/go-setup/#9-use-go-build-to-both-build-and-run-the-program","title":"9. <code>Use \"go build\" to Both Build and Run the Program</code>","text":"<p>Another way to compile and run the program is to run the following:</p> <pre><code>go build -o hello-comp423\n./hello-comp423\n</code></pre> <p>Now anytime you type ./hello-comp423 in the terminal, \"Hello COMP423\" should pop up.</p>"}]}